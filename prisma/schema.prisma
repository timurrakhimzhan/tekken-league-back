generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model Match {
  id                Int         @id @default(autoincrement())
  p1Username        String      @db.VarChar(50)
  p1Score           Int?
  p2Username        String      @db.VarChar(50)
  p2Score           Int?
  status            MatchStatus
  submittedBy       String?     @db.VarChar(50)
  p1Delta           Int?
  p2Delta           Int?
  declinedBy        String?     @db.VarChar(50)
  declineComment    String?
  challengeId       Int         @unique(map: "challenge_id_unique")
  createdAt         DateTime    @default(now()) @db.Timestamp(6)
  updatedAt         DateTime    @default(now()) @db.Timestamp(6)
  resultSubmittedAt DateTime?   @db.Timestamp(6)
  seasonId          Int
  Challenge         Challenge   @relation(fields: [challengeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_challenge")
  UserDeclined      User?       @relation("Match_declinedByToUser", fields: [declinedBy], references: [username], onDelete: NoAction, onUpdate: NoAction, map: "fk_declined_by_username")
  UserP1            User        @relation("Match_p1UsernameToUser", fields: [p1Username], references: [username], onDelete: NoAction, onUpdate: NoAction, map: "fk_p1_username")
  UserP2            User        @relation("Match_p2UsernameToUser", fields: [p2Username], references: [username], onDelete: NoAction, onUpdate: NoAction, map: "fk_p2_username")
  Season            Season      @relation(fields: [seasonId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_matches_seasons_season_id")
  UserSubmitted     User?       @relation("Match_submittedByToUser", fields: [submittedBy], references: [username], onDelete: NoAction, onUpdate: NoAction, map: "fk_submitted_by_username")
}

model User {
  username           String       @id @db.VarChar(50)
  email              String       @unique @db.VarChar(100)
  password           String       @db.VarChar(100)
  character          String       @db.VarChar(50)
  steamUrl           String       @db.VarChar(150)
  otherInfo          String?
  emailConfirmed     Boolean      @default(false)
  createdAt          DateTime     @default(now()) @db.Timestamp(6)
  updatedAt          DateTime     @default(now()) @db.Timestamp(6)
  Character          DCharacter   @relation(fields: [character], references: [codename], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_character")
  ChallengesReceived Challenge[]  @relation("Challenge_challengedUsernameToUser")
  ChallengesMade     Challenge[]  @relation("Challenge_challengerUsernameToUser")
  MatchesDeclined    Match[]      @relation("Match_declinedByToUser")
  MatchesP1          Match[]      @relation("Match_p1UsernameToUser")
  MatchesP2          Match[]      @relation("Match_p2UsernameToUser")
  MatchesSubmitted   Match[]      @relation("Match_submittedByToUser")
  UserSeasons        UserSeason[]
}

model schemaversion {
  version BigInt    @id
  name    String?
  md5     String?
  run_at  DateTime? @db.Timestamptz(6)
}

model Challenge {
  id                 Int             @id @default(autoincrement())
  challengerUsername String          @db.VarChar(50)
  challengedUsername String          @db.VarChar(50)
  status             ChallengeStatus
  firstTo            Int
  challengeComment   String?
  answerComment      String?
  createdAt          DateTime        @default(now()) @db.Timestamp(6)
  updatedAt          DateTime        @default(now()) @db.Timestamp(6)
  statusChangedAt    DateTime?       @db.Timestamp(6)
  UserChallenged     User            @relation("Challenge_challengedUsernameToUser", fields: [challengedUsername], references: [username], onDelete: NoAction, onUpdate: NoAction, map: "fk_matches_challenged_username")
  UserChallenger     User            @relation("Challenge_challengerUsernameToUser", fields: [challengerUsername], references: [username], onDelete: NoAction, onUpdate: NoAction, map: "fk_matches_challenger_username")
  Match              Match?
}

model DCharacter {
  codename String @id @db.VarChar(50)
  labelRu  String @db.VarChar(50)
  labelEn  String @db.VarChar(50)
  Users    User[]
}

model Season {
  id          Int          @id @default(autoincrement())
  label       String       @db.VarChar(50)
  startedAt   DateTime     @default(now()) @db.Timestamp(6)
  finishedAt  DateTime?    @db.Timestamp(6)
  isCurrent   Boolean      @default(true)
  Match       Match[]
  UserSeasons UserSeason[]
}

model UserSeason {
  id       Int    @id @default(autoincrement())
  username String @db.VarChar(50)
  seasonId Int
  rating   Int
  wins     Int    @default(0)
  loses    Int    @default(0)
  Season   Season @relation(fields: [seasonId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_seasons_season_id")
  User     User   @relation(fields: [username], references: [username], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_seasons_username")

  @@unique([username, seasonId], map: "username_season_id_unique")
}

enum ChallengeStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum MatchStatus {
  IN_PROGRESS
  CONFIRMING_SCORE
  DECLINED
  FINISHED
}
